{
  "_args": [
    [
      {
        "raw": "react-flow-types@0.2.0-beta.3",
        "scope": null,
        "escapedName": "react-flow-types",
        "name": "react-flow-types",
        "rawSpec": "0.2.0-beta.3",
        "spec": "0.2.0-beta.3",
        "type": "version"
      },
      "/Users/hugofnesteves/Desktop/React/Fogos1/node_modules/material-ui"
    ]
  ],
  "_from": "react-flow-types@0.2.0-beta.3",
  "_id": "react-flow-types@0.2.0-beta.3",
  "_inCache": true,
  "_location": "/react-flow-types",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-flow-types-0.2.0-beta.3.tgz_1508265762073_0.1193060097284615"
  },
  "_npmUser": {
    "name": "ariaminaei",
    "email": "aria.minaei@gmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-flow-types@0.2.0-beta.3",
    "scope": null,
    "escapedName": "react-flow-types",
    "name": "react-flow-types",
    "rawSpec": "0.2.0-beta.3",
    "spec": "0.2.0-beta.3",
    "type": "version"
  },
  "_requiredBy": [
    "/material-ui"
  ],
  "_resolved": "https://registry.npmjs.org/react-flow-types/-/react-flow-types-0.2.0-beta.3.tgz",
  "_shasum": "93e7e3c95a75a1a941de05b9d7287e3ca6871046",
  "_shrinkwrap": null,
  "_spec": "react-flow-types@0.2.0-beta.3",
  "_where": "/Users/hugofnesteves/Desktop/React/Fogos1/node_modules/material-ui",
  "author": {
    "name": "Aria Minaei",
    "url": "aria.minaei@gmail.com"
  },
  "dependencies": {},
  "description": "A small collection of flow type definitions for working with React components",
  "devDependencies": {
    "flow-bin": "^0.57.3",
    "react": "^15.4.2",
    "react-dom": "^15.4.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-wrzQ4TJaRAqNA3hFxj23QnnuFfvb3t3J1aXouWX95DwyUfo2CFpmaB+dP7jpwXF0fsv6awHqsxdSnjRVLTfTiA==",
    "shasum": "93e7e3c95a75a1a941de05b9d7287e3ca6871046",
    "tarball": "https://registry.npmjs.org/react-flow-types/-/react-flow-types-0.2.0-beta.3.tgz"
  },
  "gitHead": "3b39b78addc210f3480c02963cc0d4ca0161f1f6",
  "keywords": [],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ariaminaei",
      "email": "aria.minaei@gmail.com"
    }
  ],
  "name": "react-flow-types",
  "optionalDependencies": {},
  "readme": "# react-flow-types\n\n[![npm downloads](https://img.shields.io/npm/dt/react-flow-types.svg)](https://www.npmjs.com/package/react-flow-types)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/nordsoftware/react-flow-types/master/LICENSE)\n[![Gitter](https://img.shields.io/gitter/room/norsoftware/open-source.svg?maxAge=2592000)](https://gitter.im/nordsoftware/open-source)\n\n## Note\n\nMost of the types that used to be in this package now have equivalents in [flow@0.53](https://github.com/facebook/flow/releases/tag/v0.53.0), so I'm deprecating them. The most important type that still remains is `HigherOrderComponent`. If you come up with more useful types for react, feel free to submit a PR :)\n\n## Usage\n\n```\n$ npm install --save-dev react-flow-types\n```\n\n### `HigherOrderComponent<RequiredProps, ProvidedProps>`\n\nThe generic type of a higher-order component. A `HigherOrderComponent` always *provides* a set of props to the inner component, and *requires* another set of props to be passed to it.\n\nExample:\n\n```javascript\nimport type {HigherOrderComponent} from 'react-flow-types'\n\ntype RequiredProps = {\n  name: string,\n}\n\ntype ProvidedProps = {\n  input: {\n    value: mixed,\n    onChange: Function,\n  },\n}\n\n// The hoc:\nconst asField = (): HigherOrderComponent<{name: string}, ProvidedProps> => (component): any => {\n  const FinalComponent = ({name, ...rest}) =>\n    <ReduxFormField name={name} component={component} props={rest} />;\n\n  hoistNonReactStatics(FinalComponent, component)\n\n  FinalComponent.displayName =\n    `asField(${component.displayName || component.name || 'Component'})`\n\n  return FinalComponent\n}\n\nconst Input = ({input}) => <input type=\"text\" {...input} />\nconst WrapperInput = asField(Input)\n\nconst element = <WrappedInput name=\"email\" />\n```",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "flow"
  },
  "version": "0.2.0-beta.3"
}

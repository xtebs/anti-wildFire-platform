{
  "_args": [
    [
      {
        "raw": "fontfaceobserver",
        "scope": null,
        "escapedName": "fontfaceobserver",
        "name": "fontfaceobserver",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/hugofnesteves/Desktop/React/Fogos1"
    ]
  ],
  "_from": "fontfaceobserver@latest",
  "_id": "fontfaceobserver@2.0.13",
  "_inCache": true,
  "_location": "/fontfaceobserver",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fontfaceobserver-2.0.13.tgz_1496399939324_0.6219760405365378"
  },
  "_npmUser": {
    "name": "bramstein",
    "email": "b.l.stein@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fontfaceobserver",
    "scope": null,
    "escapedName": "fontfaceobserver",
    "name": "fontfaceobserver",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/fontfaceobserver/-/fontfaceobserver-2.0.13.tgz",
  "_shasum": "47adbb343261eda98cb44db2152196ff124d3221",
  "_shrinkwrap": null,
  "_spec": "fontfaceobserver",
  "_where": "/Users/hugofnesteves/Desktop/React/Fogos1",
  "author": {
    "name": "Bram Stein",
    "email": "b.l.stein@gmail.com",
    "url": "http://www.bramstein.com/"
  },
  "bugs": {
    "url": "https://github.com/bramstein/fontfaceobserver/issues"
  },
  "dependencies": {},
  "description": "Detect if web fonts are available",
  "devDependencies": {
    "closure-dom": "=0.2.6",
    "extend": "^3.0.0",
    "google-closure-compiler": "=20161024.0.0",
    "grunt": "^0.4.5",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-concat": "^1.0.1",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-exec": "~1.0.0",
    "mocha": "^2.5.3",
    "mocha-phantomjs-core": "^2.0.0",
    "phantomjs-prebuilt": "^2.1.7",
    "promis": "=1.1.4",
    "sinon": "^1.17.4",
    "unexpected": "^10.14.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "47adbb343261eda98cb44db2152196ff124d3221",
    "tarball": "https://registry.npmjs.org/fontfaceobserver/-/fontfaceobserver-2.0.13.tgz"
  },
  "files": [
    "fontfaceobserver.js",
    "fontfaceobserver.standalone.js",
    "src/*.js",
    "externs.js"
  ],
  "gitHead": "f36f4fc1082287cd751e432adfe0cd67a9f91561",
  "homepage": "https://fontfaceobserver.com/",
  "keywords": [
    "fontloader",
    "fonts",
    "font",
    "font-face",
    "web font",
    "font load",
    "font events"
  ],
  "license": "BSD-3-Clause",
  "main": "fontfaceobserver.standalone.js",
  "maintainers": [
    {
      "name": "bramstein",
      "email": "b.l.stein@gmail.com"
    }
  ],
  "name": "fontfaceobserver",
  "optionalDependencies": {},
  "readme": "# Font Face Observer [![Build Status](https://travis-ci.org/bramstein/fontfaceobserver.png?branch=master)](https://travis-ci.org/bramstein/fontfaceobserver)\n\nFont Face Observer is a small `@font-face` loader and monitor (3.5KB minified and 1.3KB gzipped) compatible with any web font service. It will monitor when a web font is applied to the page and notify you. It does not limit you in any way in where, when, or how you load your web fonts. Unlike the [Web Font Loader](https://github.com/typekit/webfontloader) Font Face Observer uses scroll events to detect font loads efficiently and with minimum overhead.\n\n## How to use\n\nInclude your `@font-face` rules as usual. Fonts can be supplied by either a font service such as [Google Fonts](http://www.google.com/fonts), [Typekit](http://typekit.com), and [Webtype](http://webtype.com) or be self-hosted. It doesn't matter where, when, or how you load your fonts. You can set up monitoring for a single font family at a time:\n\n```js\nvar font = new FontFaceObserver('My Family', {\n  weight: 400\n});\n\nfont.load().then(function () {\n  console.log('Font is available');\n}, function () {\n  console.log('Font is not available');\n});\n```\n\nThe `FontFaceObserver` constructor takes two arguments: the font family name (required) and an object describing the variation (optional). The object can contain `weight`, `style`, and `stretch` properties. If a property is not present it will default to `normal`. To start observing font loads, call the `load` method. It'll immediately return a new Promise that resolves when the font is available and rejected when the font is not available.\n\nIf your font doesn't contain latin characters you can pass a custom test string to the `load` method.\n\n```js\nvar font = new FontFaceObserver('My Family');\n\nfont.load('中国').then(function () {\n  console.log('Font is available');\n}, function () {\n  console.log('Font is not available');\n});\n```\n\nThe default timeout for giving up on font loading is 3 seconds. You can increase or decrease this by passing a number of milliseconds as the second parameter to the `load` method.\n\n```js\nvar font = new FontFaceObserver('My Family');\n\nfont.load(null, 5000).then(function () {\n  console.log('Font is available');\n}, function () {\n  console.log('Font is not available after waiting 5 seconds');\n});\n```\n\nMultiple fonts can be loaded by creating a FontFaceObserver instance for each.\n\n```js\nvar fontA = new FontFaceObserver('Family A');\nvar fontB = new FontFaceObserver('Family B');\n\nfontA.load().then(function () {\n  console.log('Family A is available');\n});\n\nfontB.load().then(function () {\n  console.log('Family B is available');\n});\n```\n\nYou may also load both at the same time, rather than loading each individually.\n\n```js\nvar fontA = new FontFaceObserver('Family A');\nvar fontB = new FontFaceObserver('Family B');\n\nPromise.all([fontA.load(), fontB.load()]).then(function () {\n  console.log('Family A & B have loaded');\n});\n```\n\nThe following example emulates FOUT with Font Face Observer for \"My Family\".\n\n```js\nvar font = new FontFaceObserver('My Family');\n\nfont.load().then(function () {\n  document.documentElement.className += \" fonts-loaded\";\n});\n```\n\n```css\n.fonts-loaded {\n  body {\n    font-family: My Family, sans-serif;\n  }\n}\n```\n\n## Installation\n\nIf you're using npm you can install Font Face Observer as a dependency:\n\n```shell\n$ npm install fontfaceobserver\n```\n\nYou can then require `fontfaceobserver` as a CommonJS (Browserify) module:\n\n```js\nvar FontFaceObserver = require('fontfaceobserver');\n\nvar font = new FontFaceObserver('My Family');\n\nfont.load().then(function () {\n  console.log('My Family has loaded');\n});\n```\n\nIf you're not using npm, grab `fontfaceobserver.js` or `fontfaceobserver.standalone.js` (see below) and include it in your project. It'll export a global `FontFaceObserver` that you can use to create new instances.\n\nFont Face Observer uses Promises in its API, so for [browsers that do not support promises](http://caniuse.com/#search=promise) you'll need to include a polyfill. If you use your own Promise polyfill you just need to include `fontfaceobserver.standalone.js` in your project. If you do not have an existing Promise polyfill you should use `fontfaceobserver.js` which includes a small Promise polyfill. Using the Promise polyfill adds roughly 1.4KB (500 bytes gzipped) to the file size.\n\n## Browser support\n\nFontFaceObserver has been tested and works on the following browsers:\n\n* Chrome (desktop & Android)\n* Firefox\n* Opera\n* Safari (desktop & iOS)\n* IE8+\n* Android WebKit\n\n## License\n\nFont Face Observer is licensed under the BSD License. Copyright 2014-2016 Bram Stein. All rights reserved.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bramstein/fontfaceobserver.git"
  },
  "scripts": {
    "postversion": "git push && git push --tags && rm -rf build && npm publish",
    "preversion": "npm test",
    "test": "grunt test",
    "version": "grunt dist && git add fontfaceobserver.js && git add fontfaceobserver.standalone.js"
  },
  "version": "2.0.13"
}
